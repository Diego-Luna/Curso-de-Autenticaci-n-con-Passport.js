///////////////////// Stack de seguridad moderno /////////////////////

Anteriormente las compañías se comunicaban mediante un intranet que actualmente 
ha sido reemplazado con un stack de seguridad moderno usando:

- JSON Web Tokens: Nos permite comunicarnos entre dos clientes de una manera más segura.
- OAuth 2.0: Un estándar de la industria que nos permite implementar autorización.
- OpenID Connect: Es una capa de autenticación que funciona por encima de Oauth 2.0.

///////////////////// Stack de seguridad moderno /////////////////////

///////////////////// ¿Qué es la autenticación y la autorización ? /////////////////////

La autenticación sirve para verificar la identidad de un usuario, verificar si el 
usuario existe y si los datos que está colocando son correctos.

La autorización es la acción de permitir a un usuario acceso limitado a nuestro 
recursos.

///////////////////// ¿Qué es la autenticación y la autorización ? /////////////////////

///////////////////// Introducción a las sesiones /////////////////////

Cuando visitamos un sitio por primera vez se crea una sesión con los ajustes que 
se configuran. Por ejemplo, en un sitio web de reserva de hoteles, a medida que 
buscamos y ponemos preferencias de precios y demás, éstas se irán guardando en 
dicha sesión. Y luego estos datos se convertirán en un ID que será almacenado 
en una cookie en tu navegador.

///////////////////// Introducción a las sesiones /////////////////////


///////////////////// Anatomía de un JWT /////////////////////

JWT (json web token) Link a documentacion: (https://tools.ietf.org/html/rfc7519)
JSON Web Token (JWT) es un estándar abierto que define una forma compacta y
autónoma para transmitir información de forma segura entre las partes como
un objeto JSON.
Esta información se puede verificar y confiar porque está firmada digitalmente.

<h3>Estructura</h3>
Los JWT se componen de 3 partes:

HEADER: Alg y typ
PAYLOAD: Claims (diccionario con informacion no sensible, preferiblemente corta)
SIGNATURE: header y payload encriptado
<h4>alg:</h4>
Algoritmo de encriptacion que puede ser Sincrono o Asincrono.

Algoritmo sincrono: Para Autentificacion en el backend
Algoritmo asíncrono: Para Autentificacion con llave publica y privada.

///////////////////// Anatomía de un JWT /////////////////////

///////////////////// Autenticación tradicional vs JWT /////////////////////

Respuesta a:
Autenticación tradicional vs JWT
Auth tradicional
- 1.- Se crea una sesión (el id se almacena en una cookie)
- 2.- Los request de ahí en adelante (hasta que expire) vienen con la información 
      de la cookie

Problemas del auth tradicional

Las SPA no refrescan todas las veces (y no saben si hubieron cambios en la sesión)
Las REST API no deberían tener estado, al crear sesiones se crea estado.Para 
microservicios las sesiones de una sóla máquina no fluyen naturalmente hacia 
varios clientes. El control de acceso requiere que vayamos a base de datos

JSON Web Tokens Auth
- 1.- En el proceso de Autenticación el server firma un token
- 2.- A partir de ese momento el cliente almacena el token en memoria y en una cookie
- 3.- Todos los request de ahí en adelante llevan el token

Ventajas de JWT

- 1.- No requiere del backend para saber si está autenticado porque lleva una f
      irma (post autenticación)
- 2.- El backend puede recibir multiples request de multiples clientes 
      (sólo necesita saber si el token está bien firmado)
- 3.- El cliente conoce los permisos que tiene, por lo que no los tiene que 
      bajar de base de datos

///////////////////// Autenticación tradicional vs JWT /////////////////////

///////////////////// Firmando y Verificando nuestro JWT /////////////////////

Para firmar nuestro token utilizaremos un paquete de node llamado jsonwebtoken 
y al usarlo en nuestro código se verá de esta manera:

- jwt.sign({ sub: user.id }, 'secret', options);

El primer atributo que recibe es el payload o sea los datos que guardaremos 
en ese token. De segundo atributo recibe una clave secreta con la cual será 
firmado y finalmente podremos pasarle opciones si es nuestro caso.

Para verificar nuestro token lo haremos de la siguiente manera:

- jwt.verify(token, 'secret', function(err, decoded){});

Como primer atributo recibiremos el token, de segundo atributo el secreto de 
la firma y como tercer argumento (opcional) recibiremos el token decodificado.

- 1.- Vamos a inicializar nuestro proyecto con npm init -y
- 2.- Crearemos el archivo index.js
- 3.- Vamos a instalar los paquetes necesarios con npm i jsonwebtoken
- 4.- En el index.js vamos a hacer toda la lógica de nuestra aplicación

Para decodificar un jwt el la pagina : (https://jwt.io/)

///////////////////// Firmando y Verificando nuestro JWT /////////////////////

///////////////////// Server-side vs Client-side sessions /////////////////////

Link para mas informacion : (https://programacionymas.com/blog/jwt-vs-cookies-y-sesiones)

Sesiones del lado del servidor vs sesiones del lado del cliente
¿Qué es una sesión?
En terminos generales una sesion es una manera de preservar un estado deseado.

¿Qué es una sesion del lado del servidor?
La sesión en el lado del servidor suele ser una pieza de información que se guarda
en memoria o en una base de datos y esta permite hacerle seguimiento a la 
información de autenticación, con el fin de identificar al usuario y determinar 
cuál es el estado de autenticación. Mantener la sesión de esta manera en el lado 
del servidor es lo que se considera “stateful”, es decir que maneja un estado.

¿Qué es una sesión del lado del cliente?
Las SPA (Single-page apps) requieren una manera de saber si el usuario esta 
autenticado o no. Pero esto no se puede hacer de una manera tradicional porque 
suelen ser muy desacopladas con el backend y no suelen refrescar la página como 
lo hacen las aplicaciones renderizadas en el servidor.

JWT (JSON Web Token) es un mecanismo de autenticación sin estado, lo que conocemos 
como “stateless”. Lo que significa que no hay una sesión que exista del lado del 
servidor.

La manera como se comporta la sesión del lado del cliente es:

1.- Cuando el usuario hace “login” agregamos una bandera para indicar que lo esta.
2.- En cualquier punto de la aplicación verificamos la expiración del token.
3.- Si el token expira, cambiamos la bandera para indicar que el usuario no está 
    logueado.
4.- Se suele chequear cuando la ruta cambia.
5.- Si el token expiró lo redireccionamos a la ruta de “login” y actualizamos el 
    estado como “logout”.
6.- Se actualiza la UI para mostrar que el usuario ha cerrado la sesión.

///////////////////// Server-side vs Client-side sessions /////////////////////

///////////////////// Buenas prácticas con JWT /////////////////////

Buenas practicas con JSON Web token

En los últimos años se ha criticado fuertemente el uso de JSON Web Tokens como 
buena practica de seguridad. La realidad es que muchas compañías hoy en día los 
usan sin ningún problema siguiendo unas buenas practicas de seguridad, que 
aseguran su uso sin ningún inconveniente.

A continuación listaremos unos consejos que se deben tener en cuenta:

Evitar almacenar información sensible

Debido a que los JSON Web tokens son decodificables es posible visualizar la 
información del payload, por lo que ningún tipo de información sensible debe ser 
expuesto como contraseñas, keys, etc. Tampoco debería agregarse información 
confidencial del usuario como su numero de identificación o información medica, 
ya que como hablamos anteriormente, los hackers pueden usar esta información para 
hacer ingeniería social.

Mantener su peso lo más liviano posible

Suele tenerse la tentación de guardar toda la información del perfil en el 
payload del JWT, pero esto no debería hacerse ya que necesitamos que el JWT sea 
lo más pequeño posible debido a que al enviarse con todos los request estamos 
consumiendo parte del ancho de banda.

Establecer un tiempo de expiración corto

Debido a que los tokens pueden ser robados si no se toman las medidas correctas 
de almacenamiento seguro, es muy importante que estos tengan unas expiración 
corta, el tiempo recomendado es desde 15 minutos hasta un maximo de 2 horas.

Tratar los JWT como tokens opacos

Aunque los tokens se pueden decodificar, deben tratarse como tokens opacos, es 
decir como si no tuviesen ningún valor legible. Esto es porque desde el lado del 
cliente no tenemos manera de verificar si la firma es correcta, así que si 
confiamos en la información decodificada del token, alguien podría introducir un 
token invalido con otra información a propósito. Lo mejor, es siempre enviar el 
token del lado del servidor y hacer las verificaciones allí.

¿Donde guardar los tokens?

Cuando estamos trabajando con SPA (Single Page apps) debemos evitar almacenar 
los tokens en Local Storage o Session Storage. Estos deben ser almacenados en 
memoria o en una Cookie, pero solo de manera segura y con el flag httpOnly, esto 
quiere decir que la cookie debe venir del lado del servidor con el token 
almacenado. 
Más información: https://auth0.com/docs/security/store-tokens#single-page-apps

Silent authenticacion vs Refresh tokens

Debido a que es riesgoso almacenar tokens del lado del cliente, no se deberian 
usar Refresh Tokens cuando se trabaja solo con una SPA. Lo que se debe 
implementar es Silent Authentication, para ello se debe seguir el siguiente 
flujo:

La SPA obtiene un access token al hacer login o mediante cualquier flujo de OAuth.
Cuando el token expira el API retornara un error 401.
En este momento se debe detectar el error y hacer un request para obtener de 
nuevo un access token.
Si nuestro backend server tiene una sesión valida (Se puede usar una cookie) 
entonces respondemos con un nuevo access token.Más información:

https://auth0.com/docs/api-auth/tutorials/silent-authentication
https://auth0.com/docs/tokens/refresh-token/current

Hay que tener en cuenta que para implementar Silent authentication y Refresh 
tokens, se require tener un tipo de sesión valida del lado del servidor por lo 
que en una SPA es posible que sea necesario una especie de backend-proxy, ya que 
la sesión no debería convivir en el lado del API server.

En el paso 2, si se esta usando alguna librería para manejo de estado como redux, 
se puede implementar un middleware que detecte este error y proceda con el paso 3.

///////////////////// Buenas prácticas con JWT /////////////////////

///////////////////// ¿Qué son las cookies y cómo implementar el manejo de sesión? /////////////////////

Una cookie es un archivo creado por un sitio web que tiene pequeños pedazos de 
datos almacenados en él. Su propósito es identificar al usuario mediante el 
almacenamiento de su historial.

Las cookie session son cookies que tienen un corto periodo de vida ya que son 
removidas cuando el navegador o la pestaña se cierran.

Las persistent cookies se usan generalmente para guardar información de interés 
para el usuario.

Las secure cookies almacenan datos de forma cifradas para que terceros no puedan 
tener acceso a ellas, se suelen usar en conexiones HTTPS (Conexiones seguras).

Hay leyes sobre cookies que debes seguir al pie de la letra:

Avisarle al usuario que estás haciendo uso de cookies en tu sitio para guardar información
Es necesario que el usuario de su consentimiento para manejar cookies en tu sitio.

En el codigo instalamos :
- npm i express express-session
(express-session nos va ayudar con el manejo de cookies)

- npm i -D nodemon
(-D significa dependencias de desarrollo)

({-

const express = require('express');
// permite el manejo de las seciones
const session = require('express-session');

const app = express();

// resave: false (que no guarde la cokie cada bes que se aga un cambio)
// saveUninitialized: false (que cuando la cokie no se alla inicialisado no me la guarde por defecto)
// secret: (deve tener un minimo de de 256 bits, cuando se valla asifrar lo va a utilisar)
app.use(session({
  resave: false,
  saveUninitialized: false,
  secret: 'keyboard cat',
}));

app.get('/', (req, res) => {
  req.session.count = req.session.count? req.session.count+1 : 1;
  // ponemos el estado 200, que todo esta bien
  res.status(200).json({hello: 'word',counter : req.session.count});
})

app.listen(3000, () => {
  console.log('esta corriendo el el puerto 300');
});

-})

///////////////////// ¿Qué son las cookies y cómo implementar el manejo de sesión? /////////////////////

///////////////////// Cookies vs Session Storage vs Local Storage /////////////////////

-> El Local Storage tiene un almacenamiento máximo de 5MB y la información no se va 
con cada request al servidor, la información va a persistir aunque cerremos el 
navegador.

-> El Session Storage es similar al Local Storage solo que la información está 
disponible por pestaña o por la ventana del navegador. La información estará 
disponible solo en esa pestaña.

-> Las Cookies tienen solo un almacenamiento de 4KB, se les puede establecer un 
tiempo de expiración, la desventaja de usarlo es que al hacer request de imágenes 
o datos las cookies van junto con la petición.

-> Si la información no es sensible podemos almacenarla en Local Storage o en 
Session Storage.

///////////////////// Cookies vs Session Storage vs Local Storage /////////////////////

///////////////////// Arquitectura del proyecto Platzi Video /////////////////////
Nuestro proyecto va a depender de un API Server, el cual fue construido en el 
Curso de Backend con Node.js. Este tiene un CRUD de películas, añadido a esto 
nosotros vamos a crear un endpoint para registrar e iniciar la sesión de nuestros 
usuarios.


///////////////////// Arquitectura del proyecto Platzi Video /////////////////////

///////////////////// Cómo conectarnos a la base de datos /////////////////////

-> Como conectarnos a la base de datos
MongoDB Compass es un cliente con interfaz grafica que nos permiten conectarnos a 
nuestras instancias de Mongo DB y manipularlas de una manera más facil. Con este 
cliente nos podemos conectar a una instancia de cualquier servidor incluso una 
instancia de MongoDB Atlas.

Para descargarlo se puede usar el siguiente enlace: https://www.mongodb.com/download-center/compass

-> Conexión usando MongoDB Compass

Si nosotros copiamos el Mongo URI desde Mongo Atlas podemos conectarnos 
facilmente con MongoDB Compass:

1 ->Iniciamos sesion en MongoDB Atlas https://www.mongodb.com/cloud/atlas
2 ->Nos vamos a la sección de Clusters en el menu lateral izquierdo.
3 ->Seleccionamos connect en nuestro cluster sandbox.
4 ->Seleccionamos la opción Connect with MongoDB Compass.
5 ->Si no tenemos MongoDB Compass instalado, podemos descargarlo desde alli. Si 
      ya lo tienes instalado continua con el paso 5.
6 ->Le damos click en el boton copy para copiar el Mongo URI.
7 ->Abrimos MongoDB Compass e inmediatamente va a reconocer nuestra URI que 
      tenemos en el portapapeles.
8 ->Hacemos click en yes para que nos cree una nueva conexión, pero es necesario 
      introduccir el password del usuario de la base de datos.
9 ->Podemos ponerle un nombre favorito y darle en Create favorite y luego en 
      Connect.


///////////////////// Cómo conectarnos a la base de datos /////////////////////

///////////////////// Implementando recordar sesión /////////////////////
Generalmente cuando queremos implementar la opción de recordar sesión para Express 
mediante passport, lo que hacemos es extender la expiración de la Cookie.

En nuestra ruta de sign-in de nuestro render server hacemos las siguientes 
modificaciones:

<--- codigo --->

// Agregamos las variables de timpo en segundos
const THIRTY_DAYS_IN_SEC = 2592000;
const TWO_HOURS_IN_SEC = 7200;

app.post("/auth/sign-in", async function(req, res, next) {
  // Obtenemos el atributo rememberMe desde el cuerpo del request
  const { rememberMe } = req.body;

  passport.authenticate("basic", function(error, data) {
    try {
      if (error || !data) {
        next(boom.unauthorized());
      }

      req.login(data, { session: false }, async function(error) {
        if (error) {
          next(error);
        }

        const { token, ...user } = data;

        // Si el atributo rememberMe es verdadero la expiración será en 30 dias
        // de lo contrario la expiración será en 2 horas
        res.cookie("token", token, {
          httpOnly: !config.dev,
          secure: !config.dev,
          maxAge: rememberMe ? THIRTY_DAYS_IN_SEC : TWO_HOURS_IN_SEC
        });

        res.status(200).json(user);
      });
    } catch (error) {
      next(error);
    }
  })(req, res, next);
});

<--- codigo --->

///////////////////// Implementando recordar sesión /////////////////////

///////////////////// ¿Qué es OAuth 2.0 y OpenID Connect? /////////////////////

OAuth 2.0 es un estándar de la industria que nos permite implementar autorización.

OpenID Connect es una capa de autenticación que funciona sobre OAuth con métodos 
ya construidos.

///////////////////// ¿Qué es OAuth 2.0 y OpenID Connect? /////////////////////

///////////////////// Cómo crear un proyecto en Google API para hacer autenticación con 0Auth 2.0 /////////////////////

Con el fin de poder usar Google como método de autenticación es necesario crear un 
nuevo proyecto dentro de la consola de desarrolladores de Google.

-> Nos dirigimos a https://console.developers.google.com y nos autenticamos con
  nuestra cuenta de Google.
-> En la parte superior izquierda seleccionamos la organización que queremos usar
  (Debe haber una por defecto) y hacemos click en Create Project.
-> Luego nos vamos al sidebar izquierdo y seleccionamos Credentials > Create 
  credentials > OAuth client ID
-> Nos aseguramos de elegir Web Application como el tipo de aplicación.
-> Luego establecemos el nombre del cliente que en nuestro caso será SSR Server,
  el Authorized JavaScript origins: http://localhost:8000 y el Authorized redirect URIs http://localhost:8000/auth/google-oauth/callback. Cuando hagamos despliegue de nuestra aplicación lo ideal es crear otro cliente y remplazar las URLs por las URLs correspondientes de producción.
-> El Application Name del Consent Screen será Platzi Videos.
-> Al finalizar la creación copiamos el Client ID y Client secret que seran 
  usados como GOOGLE_CLIENT_ID y GOOGLE_CLIENT_SECRET respectivamente.

///////////////////// Cómo crear un proyecto en Google API para hacer autenticación con 0Auth 2.0 /////////////////////

///////////////////// Autenticación con Google usando OpenID Connect /////////////////////

En el curso vimos como se podia implementar Google Authentication usando la 
estrategia de OAuth directamente. En esta lectura vamos a explorar como hacer la 
autenticación usando la estrategia directa de Google.

Lo primero es instalar nuestras dependencias

- npm install passport-google-oauth

Luego creamos una nueva estrategia llamada "google" dentro de 
"utils/auth/strategies/google.js":
<--- codigo --->
const passport = require("passport");
const { OAuth2Strategy: GoogleStrategy } = require("passport-google-oauth");

const { config } = require("../../../config/index");

passport.use(
  new GoogleStrategy(
    {
      clientID: config.googleClientId,
      clientSecret: config.googleClientSecret,
      callbackURL: "/auth/google/callback"
    },
    function(accessToken, refreshToken, profile, cb) {
      const { data, status } = await axios({
        url: `${config.apiUrl}/api/auth/sign-provider`,
        method: "post",
        data: {
            name: profile.name,
            email: profile.email,
            password: profile.id,
            apiKeyToken: config.apiKeyToken
        }
      });

      if (!data || status !== 200) {
        return cb(boom.unauthorized(), false);
      }

      return cb(null, data);
    }
  )
)
<--- codigo --->

Teniendo nuestra estrategia de Google ya podemos agregar las dos nuevas rutas de 
autenticación.
<--- codigo --->
app.get(
  "/auth/google",
  passport.authenticate("google", {
    scope: ["email", "profile", "openid"]
  })
);

app.get(
  "/auth/google/callback",
  passport.authenticate("google", { session: false }),
  function(req, res, next) {
    if (!req.user) {
      next(boom.unauthorized());
    }

    const { token, ...user } = req.user;

    res.cookie("token", token, {
      httpOnly: !config.dev,
      secure: !config.dev
    });

    res.status(200).json(user);
  }
);
<--- codigo --->

Con esto tenemos nuestra implementación de autenticación con Google pero mucho 
más sencilla.

///////////////////// Autenticación con Google usando OpenID Connect /////////////////////
